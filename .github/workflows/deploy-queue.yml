name: Deploy Queue

on:
  pull_request:
    types: ["opened", "synchronize", "reopened"]
    branches: ["main"]
    paths: ["deploy-queue/**"]
  push:
    branches: ["main"]
    paths: ["deploy-queue/**"]
    tags: ["deploy-queue-v*.*.*"]

permissions:
  contents: read

env:
  GHCR_REPO: ghcr.io/neondatabase/dev-actions

jobs:
  build-image:
    runs-on: ${{ matrix.runner }}
    outputs:
      digest_x86_64: ${{ steps.export_digest.outputs.digest_x86_64 }}
      digest_aarch64: ${{ steps.export_digest.outputs.digest_aarch64 }}
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: deploy_queue_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/deploy_queue_test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Fetch deploy-queue folder
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: deploy-queue

      - name: Setup database schema and generate query cache
        working-directory: deploy-queue
        run: |
          # PostgreSQL is already healthy thanks to health checks
          # Install sqlx-cli to run migrations and generate query cache
          cargo install sqlx-cli --no-default-features --features postgres
          
          # Apply migrations directly to set up schema for SQLx macros
          sqlx migrate run
          
          # Generate query cache for offline compilation in Docker
          # First ensure dependencies are resolved by doing a check build
          echo "Resolving dependencies..."
          cargo check
          
          echo "Generating SQLx query cache..."
          cargo sqlx prepare
          
          echo "Database schema setup and query cache generation completed"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.GHCR_REPO }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: deploy-queue
          labels: ${{ steps.meta.outputs.labels }}
          attests: |
            type=provenance,mode=max
            type=sbom,generator=docker.io/docker/buildkit-syft-scanner:1
          outputs: type=image,name=${{ env.GHCR_REPO }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        id: export_digest
        run: |
          digest="${{ steps.build.outputs.digest }}"
          echo "digest_$(uname -m)=${digest#sha256:}" | tee -a "$GITHUB_OUTPUT"

  merge-image:
    runs-on: ["self-hosted", "small"]
    needs: [build-image]
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.GHCR_REPO }}
          tags: |
            # branch event
            type=ref,enable=true,priority=600,prefix=deploy-queue-,suffix=,event=branch
            # pull request event
            type=ref,enable=true,priority=600,prefix=deploy-queue-pr-,suffix=,event=pr
            # tags event
            type=match,pattern=deploy-queue-v(.*)

      - name: Create manifest list and push
        run: |
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            ${{ env.GHCR_REPO }}@sha256:${{ needs.build-image.outputs.digest_aarch64 }} \
            ${{ env.GHCR_REPO }}@sha256:${{ needs.build-image.outputs.digest_x86_64 }}

      - name: Inspect image
        run: docker buildx imagetools inspect ${{ env.GHCR_REPO }}:${{ steps.meta.outputs.version }}

  build-binary:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: deploy_queue_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/deploy_queue_test
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Fetch deploy-queue folder
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          sparse-checkout: deploy-queue

      - name: Setup database schema
        working-directory: deploy-queue
        run: |
          # PostgreSQL is already healthy thanks to health checks
          # Install sqlx-cli to run migrations
          cargo install sqlx-cli --no-default-features --features postgres
          
          # Apply migrations directly to set up schema for SQLx macros
          sqlx migrate run
          
          echo "Database schema setup completed"

      - name: Build binary
        working-directory: deploy-queue
        run: |
          TARGET="$(uname -m)-unknown-linux-musl"
          echo "TARGET=${TARGET}" | tee -a "${GITHUB_ENV}"
          rustup target add "${TARGET}"
          sudo apt-get update && sudo apt-get install -y musl-tools musl-dev
          cargo install cargo-auditable --locked
          cargo auditable build --release --target "${TARGET}"
          cp "target/${TARGET}/release/deploy-queue" assets/
          mv assets "deploy-queue-${TARGET}"

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: deploy-queue-${{ env.TARGET }}
          path: deploy-queue/deploy-queue-${{ env.TARGET }}

  create-release:
    needs: [build-binary]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Fetch artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: "!*.dockerbuild"

      - name: Create archives
        run: |
          for artifact in $(ls); do
            chmod a+x "${artifact}/deploy-queue"
            tar cvf "${artifact}.tar.zst" "${artifact}"
          done
          
      - name: Create release from tag
        if: github.ref_type == 'tag'
        run: |
          gh release create "${{ github.ref_name }}" \
            --repo "${GITHUB_REPOSITORY}" \
            --title "Release ${{ github.ref_name }}" \
            --notes "Release for ${{ github.ref_name }}" \
            --verify-tag \
            deploy-queue-*.tar.zst
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update pre-release
        if: github.event_name == 'pull_request'
        run: |
          TAG="deploy-queue-pr-${{ github.event.pull_request.number }}"

          # Delete existing pre-release if it exists
          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" > /dev/null 2>&1; then
            echo "Deleting existing release $TAG"
            gh release delete "$TAG" \
              --repo "$GITHUB_REPOSITORY" \
              --yes \
              --cleanup-tag
          fi

          gh release create "$TAG" \
            --repo "${GITHUB_REPOSITORY}" \
            --target "${COMMIT_SHA}" \
            --prerelease \
            --title "Pre-release for $TAG" \
            --notes "Pre-release for $TAG" \
            deploy-queue-*.tar.zst
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-deploy-queue-action:
    if: github.event_name == 'pull_request' || github.ref_type == 'tag'
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Fetch deploy-queue folder
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: deploy-queue

      - name: Start deployment for test-resource as component A
        uses: ./deploy-queue
        with:
          mode: start
          region: test-region
          component: test-component
          environment: dev
          version: test-version
          url: test-url
          note: test-note

      - name: Try (and fail) to start deployment for test-resource as component B
        uses: ./deploy-queue
        continue-on-error: true
        timeout-minutes: 1
        with:
          mode: start
          region: test-region
          component: test-component
          environment: dev
          version: test-version
          url: test-url
          note: test-note

      - name: Try (and fail) to finish deployment for component B
        uses: ./deploy-queue
        continue-on-error: true
        timeout-minutes: 1
        with:
          mode: finish
          deployment_id: 1234567890


      - name: Cancel deployment as component B
        uses: ./deploy-queue
        with:
          mode: cancel
          deployment_id: 1234567890
          cancellation_note: test-cancellation-note

      - name: Get info about deployment
        uses: ./deploy-queue
        with:
          mode: info
          deployment_id: 1234567890
